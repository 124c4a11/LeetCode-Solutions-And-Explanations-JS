/**
 * @param {number[]} bills
 * @return {boolean}
 * 
 * Метод lemonadeChange принимает на вход
 * массив bills, где каждый элемент
 * — номинал купюры, которую дает очередной
 * покупатель за лимонад стоимостью 5.
 * 
 * Функция проверяет, можно ли корректно
 * выдать сдачу каждому покупателю при
 * последовательном обслуживании 
 * и возвращает true, если обслужить всех
 * можно, иначе false.
 */
function lemonadeChange(bills) {

  // Создаём переменную five для
  // хранения количества купюр
  // номиналом 5 (изначально 0)
  let five = 0;

  // Создаём переменную ten для хранения
  // количества купюр
  // номиналом 10 (изначально 0)
  let ten = 0;

  // Проходим последовательно по каждой
  // купюре в массиве bills.
  for (let b of bills) {

    // Если покупатель платит ровно 5,
    // то сдача не требуется, поэтому
    // просто увеличиваем количество
    // пятёрок, так как продавец
    // получил эту купюру.
    if (b === 5) {
      five++;

    // Если покупатель платит 10,
    // то нужно выдать сдачу 5.
    //
    // Мы предполагаем, что для сдачи
    // используем одну пятёрку. Уменьшаем
    // её количество на 1, и фиксируем,
    // что продавец получил одну десятку,
    // увеличив счётчик десяток на 1.
    } else if (b === 10) {
      five--;
      ten++;

    // Если купюра 20 (любой номинал,
    // не равный 5 и не равный 10
    // попадает сюда),
    // оптимальная стратегия — отдать
    // сдачу 15 так, чтобы сохранить как
    // можно больше пятёрок:
    // сначала проверяем, есть ли десятка.
    // Если десятка есть, даём одну десятку
    // и одну пятёрку.
    // Это уменьшает счётчики десяток
    // и пятёрок на 1.
    } else if (ten > 0) {
      five--;
      ten--;

    // Если десяток нет, то у нас
    // остаётся только один вариант: дать
    // сдачу тремя пятёрками, поэтому
    // уменьшаем счётчик пятёрок на 3.
    } else {
      five -= 3;
    }

    // После каждого обслуживания
    // проверяем, не ушёл ли запас пятёрок
    // в отрицательное значение. Если ушёл,
    // значит мы не смогли дать необходимую
    // сдачу — возвращаем false.
    if (five < 0) return false;
  }

  // Если цикл завершился без ситуаций
  // с отрицательным количеством пятёрок,
  // значит удалось корректно выдать сдачу
  // всем покупателям — возвращаем true.
  return true;
}
