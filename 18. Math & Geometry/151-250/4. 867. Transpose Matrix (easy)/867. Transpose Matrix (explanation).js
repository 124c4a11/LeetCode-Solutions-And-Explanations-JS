/**
 * @param {number[][]} matrix
 * @return {number[][]}
 * 
 * Функция transpose возвращает новую матрицу,
 * полученную путём транспонирования входной
 * матрицы — строки становятся столбцами,
 * столбцы становятся строками. 
 * 
 * Параметры:
 *   matrix — двумерный массив (массив строк),
 *   где каждая внутренняя строка имеет
 *   одинаковую длину (одно и то же число
 *   столбцов). 
 * 
 * Возвращаемое значение:
 * Новый двумерный массив размером columns x rows,
 * где columns = matrix[0].length,
 *     rows = matrix.length.
 * 
 * Пример:
 *   Для: matrix = [[1,2,3],[4,5,6]]  
 *   Результат: [[1,4],[2,5],[3,6]]
 */
function transpose(matrix) {

  // Создаём новый пустой массив result,
  // который будет содержать транспонированную
  // матрицу.
  //
  // result будет иметь количество строк,
  // равное числу столбцов исходной matrix и 
  // количество столбцов равное числу строк.
  //
  // На этом этапе result = [].
  const result = [];

  // Внешний цикл перебирает индексы столбцов
  // исходной матрицы.
  //
  // matrix[0].length — длина первой строки,
  // то есть число столбцов.
  //
  // Переменная c указывает на столбец
  // исходной матрицы и на строку
  // результирующей.
  //
  // Для примера
  //   matrix[0].length = 3,
  //   поэтому c пробегает 0,1,2.
  for (let c = 0; c < matrix[0].length; c++) {

    // Инициализируем пустой внутренний
    // массив в result по индексу c.
    //
    // Это создаёт будущую строку
    // транспонированной матрицы,
    // соответствующую столбцу c исходной
    // матрицы.
    //
    // После первой итерации (c = 0):
    //   result = [[]];
    // После второй:
    //   result = [[],[]]; и т.д.
    result[c] = [];

    // Запускаем внутренний цикл по
    // индексам строк исходной матрицы.
    //
    // matrix.length — число строк
    // исходной матрицы.
    //
    // Переменная r указывает на строку
    // исходной матрицы и на столбец
    // результирующей.
    //
    // Для примера matrix.length = 2,
    // поэтому r пробегает 0 и 1.
    for (let r = 0; r < matrix.length; r++) {

      // Это ключевая операция
      // транспонирования:
      //
      // Строки и столбцы меняются
      // местами.
      //
      // Это конкретное присваивание
      // реализует зеркальную замену
      // индексов, необходимую для
      // транспонирования.
      result[c][r] = matrix[r][c];
    }
  }

  // Пример работы цикла для
  // matrix = [[1,2,3],[4,5,6]]:
  //
  // Инициализация
  // 
  // - Исходная матрица:
  //     matrix = [[1,2,3],[4,5,6]]  
  // - Начальное состояние:
  //     const result = [];  
  // - Параметры циклов:
  //     matrix[0].length = 3
  //     matrix.length = 2,
  // 
  // ---
  // 
  // Итерация c = 0
  // 
  // - Выполняется: result[0] = [];  
  //   result = [ [] ]
  // 
  // - Внутренний цикл r = 0  
  //   - Выполняется result[0][0] = matrix[0][0],
  //     где matrix[0][0] = 1  
  //   - result = [ [1] ]
  // 
  // - Внутренний цикл r = 1  
  //   - Выполняется result[0][1] = matrix[1][0],
  //     где matrix[1][0] = 4  
  //   - result = [ [1, 4] ]
  // 
  // ---
  // 
  // Итерация c = 1
  // 
  // - Выполняется: result[1] = [];  
  //   result = [ [1, 4], [] ]
  // 
  // - Внутренний цикл r = 0  
  //   - Выполняется result[1][0] = matrix[0][1],
  //     где matrix[0][1] = 2  
  //   - result = [ [1, 4], [2] ]
  // 
  // - Внутренний цикл r = 1  
  //   - Выполняется result[1][1] = matrix[1][1],
  //     где matrix[1][1] = 5  
  //   - result = [ [1, 4], [2, 5] ]
  // 
  // ---
  // 
  // Итерация c = 2
  // 
  // - Выполняется: result[2] = [];  
  //   result = [ [1, 4], [2, 5], [] ]
  // 
  // - Внутренний цикл r = 0  
  //   - Выполняется result[2][0] = matrix[0][2],
  //     где matrix[0][2] = 3  
  //   - result = [ [1, 4], [2, 5], [3] ]
  // 
  // - Внутренний цикл r = 1  
  //   - Выполняется result[2][1] = matrix[1][2],
  //     где matrix[1][2] = 6  
  //   - result = [ [1, 4], [2, 5], [3, 6] ]
  // 
  // ---
  // 
  // Итог:
  // 
  // - После завершения всех итераций возвращаем
  //   result = [[1,4],[2,5],[3,6]].

  // Возвращаем полностью заполненную
  // транспонированную матрицу.
  //
  // Для примера возвращается
  // [[1,4],[2,5],[3,6]].
  return result;
}
