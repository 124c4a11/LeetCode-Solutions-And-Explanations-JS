/**
 * @param {string} s
 * @return {number}
 * 
 * Функция преобразует римскую запись числа
 * в целое десятичное значение, обходя
 * строку символ за символом и суммируя
 * соответствующие значения, при этом
 * применяя правило вычитания для случаев,
 * когда меньший по значению символ стоит
 * перед большим (например, IV = 4).
 * 
 * Параметры:
 *   s — строка, содержащая римское число
 *   (последовательность символов
 *   `I V X L C D M`).
 */
function romanToInt(s) {
  const n = s.length;

  const roman = {
    I: 1,
    V: 5,
    X: 10,
    L: 50,
    C: 100,
    D: 500,
    M: 1000,
  };

  // Инициализация аккумулятора result,
  // в котором будет накапливаться итоговое
  // целое арабское чило, равное римскому
  let result = 0;

  // Цикл по всем индексам строки s,
  // от 0 до n-1 включительно — стандартный
  // проход по символам строки
  for (let i = 0; i < n; i++) {

    // Условие проверяет два момента
    // одновременно:
    // 1. существует ли символ справа от
    //    текущего (i + 1 < n), чтобы не
    //    выйти за пределы строки
    // 2. значение текущего символа меньше
    //    значения следующего
    //    (roman[s[i]] < roman[s[i + 1]]),
    //    что означает применение правил
    //    вычитания в римской системе,
    //    это значит, что текущий символ
    //    должен вычитаться из результата
    //    (например, IV, IX и т.д.).
    if (
      i + 1 < n
      && roman[s[i]] < roman[s[i + 1]]
    ) {

      // Если выполняются оба условия,
      // текущий символ трактуется как
      // вычитающий
      // (например, I перед V в IV),
      // поэтому вычитаем его значение
      // из result
      result -= roman[s[i]];
    } else {

      // Во всех остальных ситуациях
      // (следующий символ отсутствует
      // или текущий >= следующего)
      // значение текущего символа
      // добавляется к результату.
      result += roman[s[i]];
    }
  }

  // Пример работы цикла для s = "XLIX"
  //
  // ---
  //
  // Исходные данные:
  // - Строка s = "XLIX"
  // - Индексы и символы:  
  //     s[0] = 'X',
  //     s[1] = 'L',
  //     s[2] = 'I',
  //     s[3] = 'X'
  // - Словарь roman:  
  //     'X' = 10,
  //     'L' = 50,
  //     'I' = 1
  //
  // ---
  //
  // Итерация 0 (i = 0):
  //
  // - Текущий символ: 'X' → значение: 10
  // - Следующий символ: 'L' → значение: 50
  // - Проверка: 10 < 50 → true
  // - Действие: result -= 10
  // - result = 0 - 10 = -10
  //
  // ---
  //
  // Итерация 1 (i = 1):
  //
  // - Текущий символ: 'L' → значение: 50
  // - Следующий символ: 'I' → значение: 1
  // - Проверка: 50 < 1 → false
  // - Действие: result += 50
  // - result = -10 + 50 = 40
  //
  // ---
  //
  // Итерация 2 (i = 2):
  //
  // - Текущий символ: 'I' → значение: 1
  // - Следующий символ: 'X' → значение: 10
  // - Проверка: 1 < 10 → true
  // - Действие: result -= 1
  // - result = 40 - 1 = 39
  //
  // ---
  //
  // Итерация 3 (i = 3):
  //
  // - Текущий символ: 'X' → значение: 10
  // - Следующего символа нет (i + 1 = 4, а n = 4)
  // - Проверка: i + 1 < n → false
  // - Действие: result += 10
  // - result = 39 + 10 = 49
  //
  // ---
  //
  // Итог:
  //
  // После завершения всех итераций значение
  // result становится 49, что соответствует
  // римскому числу "XLIX".

  // После прохода по всем символам
  // возвращаем окончательный накопленный
  // результат — целое арабское число,
  // соответствующее римскому числу s
  return result;
}
