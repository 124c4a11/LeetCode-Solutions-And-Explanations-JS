/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     constructor(val = 0, left = null, right = null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */


/**
 * @param {TreeNode} root
 * @param {number} val
 * @return {TreeNode}
 * 
 * Функция insertIntoBST вставляет значение val так,
 * чтобы дерево оставалось корректным BST.
 * 
 * Признаки корректного BST
 * 
 * Корректное бинарное дерево поиска (BST) — это такая
 * структура, где для каждого узла сохраняются
 * определённые отношения между значением самого узла
 * и значениями узлов в его поддеревьях.
 *
 * Основные свойства
 * 
 * - Для любого узла node все элементы в левом
 *   поддереве имеют значение меньше, чем node.val.  
 * - Для любого узла node все элементы в правом
 *   поддереве имеют значение больше, чем node.val.  
 * - Это правило применяется рекурсивно ко всем узлам
 *   во всём дереве, гарантируя глобальный порядок.
 */
function insertIntoBST(root, val) {

  // Если текущий узел отсутствует, значит мы дошли
  // до «пустой ячейки», сюда нужно поместить
  // новый узел с val.
  //
  // Cоздаём новый листовой узел со значением val
  // и возвращаем его.
  if (!root) return new TreeNode(val);

  // Если корневой узел содержит число больше val,
  // то новое число должно пойти в левое поддерево.
  if (root.val > val) {

    // Рекурсивно вызываем insertIntoBST для
    // левого поддерева и переназначаем root.left
    // на результат.
    root.left = insertIntoBST(root.left, val);
  } else {

    // Если значение в узле меньше или равно val,
    // то новое значение идет в правое поддерево.
    root.right = insertIntoBST(root.right, val);
  }

  // После того как вставка прошла в одном из
  // поддеревьев, возвращаем текущий узел, чтобы
  // сохранить его связь с родителем.
  return root;
}
