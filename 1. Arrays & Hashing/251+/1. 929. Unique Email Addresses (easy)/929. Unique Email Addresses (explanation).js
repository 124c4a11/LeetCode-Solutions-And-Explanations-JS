/**
 * @param {string[]} emails
 * @return {number}
 * 
 * Функция numUniqueEmails принимает массив
 * строк электронных адресов и возвращает
 * количество уникальных адресов после
 * нормализации. Нормализация удаляет все
 * точки в локальной части до символа @ и
 * игнорирует любую часть локальной части,
 * начинающуюся с символа +.
 * 
 * Пример:
 *  Для:
 *   emails = [
 *     "test.email+alex@leetcode.com",
 *     "test.e.mail+bob.cathy@leetcode.com",
 *     "testemail+david@lee.tcode.com"
 *   ]
 * 
 * Возвращает:
 *   2
 * 
 * Пояснение:
 *   Существует только 2 уникальных email:
 *   "testemail@leetcode.com"
 *   "testemail@lee.tcode.com"
 */
function numUniqueEmails(emails) {

  // Создаётся новый объект Set для
  // хранения уникальных нормализованных
  // адресов.
  //
  // Set автоматически исключит дубликаты
  // при добавлении одинаковых строк.
  const set = new Set();

  // Перебираем каждый элемент массива
  // emails
  for (const email of emails) {

    // Инициализация локальной переменной
    // local пустой строкой
    //
    // Сюда будет последовательно
    // добавляться нормализованная
    // локальная часть
    // (без точек и без суффикса после '+').
    let local = '';

    // Инициализация индекса i
    // - используется для посимвольного
    // прохода по строке email.
    let i = 0;

    // Запускается цикл while, который
    // проходит по символам email начиная
    // с позиции i, пока не встретится
    // символ '@' или '+' или не закончится
    // строка
    //
    // Целью является собрать символы
    // локальной части до '+' или '@',
    // пропуская точки.
    //
    // Пример:
    // для "test.email+alex@leetcode.com"
    // local = 'testemail'
    while (
      i < email.length
      && email[i] !== '@'
      && email[i] !== '+'
    ) {

      // Проверяем, является ли текущий
      // символ точкой
      //
      // По правилу нормализации локальной
      // части точки игнорируются и не
      // добавляются в local.
      if (email[i] !== '.') {

        // Если текущий символ не точка,
        // он конкатенируется к строке local
        //
        // Таким способом формируется
        // нормализованная локальная часть
        // без точек.
        //
        // Пример:
        // test.email → testemail
        local += email[i];
      }

      // Увеличиваем индекс i, чтобы
      // перейти к следующему символу
      // строки email.
      i++;
    }

    // Этот цикл while нужен на случай,
    // если предыдущий цикл остановился
    // из-за '+'
    // 
    // Он пропускает все символы 
    // от '+' до символа '@'
    //
    // Это гарантирует, что после
    // этого цикла i будет указывать
    // на символ '@' или конец строки,
    // если email некорректен
    while (
      i < email.length
      && email[i] !== '@'
    ) i++;

    // После того как i указывает на 
    // позицию символа '@' 
    // (или на конец строки),
    // извлекается доменная часть
    // начиная с позиции i + 1
    // (символ после '@') до конца
    // строки: 
    //
    // Если i указывает на '@',
    // то slice(i + 1) возвращает
    // корректную доменную часть
    // 
    // если '@' не найден
    // (редкий некорректный ввод),
    // slice возвращает пустую строку.
    //
    // Пример:
    // для "test.email+alex@leetcode.com"
    //                     ^
    // domain = 'leetcode.com'
    const domain = email.slice(i + 1);

    // Собираем нормализованный адрес
    // в форме "local@domain"
    // и добавляем его в Set.
    //
    // Если два разных исходных адреса
    // нормализуются в одинаковую строку,
    // Set игнорирует дубликат
    //
    // Пример:
    // для "test.email+alex@leetcode.com"
    //   local = 'testemail'
    //   domain = 'leetcode.com'
    //   → 'testemail@leetcode.com'
    set.add(`${local}@${domain}`);

    // Пример работы цикла:
    //
    // Начальное состояние
    //  emails = [
    //    "test.email+alex@leetcode.com",
    //    "test.e.mail+bob.cathy@leetcode.com",
    //    "testemail+david@lee.tcode.com"
    //   ]  
    //  Set до цикла = {}  
    // 
    // 
    // Шаг 1:
    //  Обрабатываем email:
    //    "test.email+alex@leetcode.com"  
    //  Нормализованный адрес:
    //    `testemail@leetcode.com`  
    //  Set после добавления:
    //    { `testemail@leetcode.com` }  
    // 
    // 
    // Шаг 2:
    //  Обрабатываем email:
    //    "test.e.mail+bob.cathy@leetcode.com"  
    //  Нормализованный адрес:
    //    testemail@leetcode.com`  
    //  Результат попытки добавления:
    //    адрес уже присутствует в Set,
    //    дубликат игнорируется
    //  Set после шага:
    //    { `testemail@leetcode.com` }  
    // 
    // 
    // Шаг 3:
    //  Обрабатываем email:
    //    "testemail+david@lee.tcode.com"  
    //  Нормализованный адрес:
    //    `testemail@lee.tcode.com`  
    //  Set после добавления
    //    { 
    //      `testemail@leetcode.com`,
    //      `testemail@lee.tcode.com`
    //    }  
    // 
    // 
    // Итог:
    //  Конечный Set:
    //    {
    //      `testemail@leetcode.com`,
    //      `testemail@lee.tcode.com`
    //    }  
    //  Возвращаемое значение = 2
  }

  // После обработки всех входных адресов
  // возвращаем размер Set — количество
  // уникальных нормализованных адресов.
  return set.size;
};